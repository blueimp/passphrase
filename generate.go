// +build ignore

// Generates a word list as words.go source file.
// Retrieves the newline separated word list from a URL or local file path
// defined by the WORD_LIST_URL environment (falls back to words.txt in the
// current directory).
// Filters out words shorter than MIN_WORD_LENGTH (defaults to a minimum word
// length of 3 characters).
package main

import (
	"bufio"
	"fmt"
	"io"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"runtime"
	"strconv"
	"strings"
	"text/template"
	"time"
)

var _, sourcePath, _, _ = runtime.Caller(0)
var sourceDir = path.Dir(sourcePath)
var defaultWordListURL = path.Join(sourceDir, "words.txt")

const defaultMinWordLength = 3

var wordsFileTemplate = template.Must(template.New("").Parse(
	`// Code generated by go generate; DO NOT EDIT.
// This file was auto-generated at
// {{ .Timestamp }}
// using data from
// {{ .URL }}.
package passphrase

// MinWordLength defines the minimum length for the individual passphrase words.
var MinWordLength = {{ .MinWordLength }}

// Words is the list of strings used for the random passphrase generation.
var Words = [...]string{
{{- range .Words }}
	{{ printf "%q" . }},
{{- end }}
}
`))

func getenv(key, fallback string) string {
	value := os.Getenv(key)
	if len(value) == 0 {
		return fallback
	}
	return value
}

func openFile(url string) (readCloser io.ReadCloser, err error) {
	if strings.HasPrefix(url, "https://") || strings.HasPrefix(url, "http://") {
		client, err := http.Get(url)
		if err != nil {
			return nil, err
		}
		readCloser = client.Body
	} else {
		readCloser, err = os.Open(url)
		if err != nil {
			return nil, err
		}
	}
	return readCloser, nil
}

func extractWords(url string, minWordLength int) (words []string, err error) {
	file, err := openFile(url)
	if err != nil {
		return nil, err
	}
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		word := scanner.Text()
		if len(word) >= minWordLength {
			words = append(words, word)
		}
	}
	file.Close()
	if err != nil {
		return nil, err
	}
	return words, nil
}

func writeWordsFile(file string, data interface{}) error {
	f, err := os.Create(file)
	if err != nil {
		return err
	}
	defer f.Close()
	return wordsFileTemplate.Execute(f, data)
}

func generate() error {
	var url = getenv("WORD_LIST_URL", defaultWordListURL)
	minWordLength, err := strconv.Atoi(getenv(
		"MIN_WORD_LENGTH",
		strconv.Itoa(defaultMinWordLength),
	))
	if err != nil {
		return err
	}
	words, err := extractWords(url, minWordLength)
	if err != nil {
		return err
	}
	file := path.Join(sourceDir, "words.go")
	if strings.HasPrefix(url, sourceDir) {
		url, err = filepath.Rel(sourceDir, url)
		if err != nil {
			return err
		}
	}
	return writeWordsFile(file, struct {
		Timestamp     time.Time
		URL           string
		Words         []string
		MinWordLength int
	}{
		Timestamp:     time.Now(),
		URL:           url,
		Words:         words,
		MinWordLength: minWordLength,
	})
}

func main() {
	err := generate()
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
